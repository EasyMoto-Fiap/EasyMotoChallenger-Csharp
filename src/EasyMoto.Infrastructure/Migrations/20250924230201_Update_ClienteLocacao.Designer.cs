// <auto-generated />
using System;
using EasyMoto.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EasyMoto.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250924230201_Update_ClienteLocacao")]
    partial class Update_ClienteLocacao
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EasyMoto.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.ClienteLocacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotoId")
                        .HasColumnType("uuid");

                    b.Property<string>("StatusLocacao")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Ativa")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("locacoes", (string)null);
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.Moto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AnoFabricacao")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LocacaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocalizacaoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Placa")
                        .IsUnique();

                    b.ToTable("motos", (string)null);
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.Cliente", b =>
                {
                    b.OwnsOne("EasyMoto.Domain.ValueObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cpf");

                            b1.HasKey("ClienteId");

                            b1.ToTable("clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("EasyMoto.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(160)
                                .HasColumnType("character varying(160)")
                                .HasColumnName("email");

                            b1.HasKey("ClienteId");

                            b1.ToTable("clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("EasyMoto.Domain.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("telefone");

                            b1.HasKey("ClienteId");

                            b1.ToTable("clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.ClienteLocacao", b =>
                {
                    b.OwnsOne("EasyMoto.Domain.ValueObjects.Periodo", "Periodo", b1 =>
                        {
                            b1.Property<Guid>("ClienteLocacaoId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Fim")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("fim");

                            b1.Property<DateTime>("Inicio")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("inicio");

                            b1.HasKey("ClienteLocacaoId");

                            b1.ToTable("locacoes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteLocacaoId");
                        });

                    b.Navigation("Periodo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
