// <auto-generated />
using System;
using EasyMoto.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EasyMoto.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250925195235_Add_Patio")]
    partial class Add_Patio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EasyMoto.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.ClienteLocacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotoId")
                        .HasColumnType("uuid");

                    b.Property<string>("StatusLocacao")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Ativa")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("locacoes", (string)null);
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEmpresa"));

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("NomeEmpresa")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.HasKey("IdEmpresa");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("empresas", (string)null);
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.Filial", b =>
                {
                    b.Property<int>("IdFilial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdFilial");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdFilial"));

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("Cidade");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer")
                        .HasColumnName("EmpresaId");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Endereco");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("Estado");

                    b.Property<string>("NomeFilial")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("NomeFilial");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("Pais");

                    b.HasKey("IdFilial");

                    b.HasIndex("EmpresaId");

                    b.ToTable("filiais", (string)null);
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Cpf");

                    b.Property<int>("FilialId")
                        .HasColumnType("integer")
                        .HasColumnName("FilialId");

                    b.Property<string>("NomeFuncionario")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("NomeFuncionario");

                    b.HasKey("Id");

                    b.HasIndex("FilialId")
                        .HasDatabaseName("IX_funcionarios_FilialId");

                    b.ToTable("funcionarios", (string)null);
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.Localizacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("DataHora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_hora");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("StatusLoc")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("status_loc");

                    b.Property<string>("ZonaVirtual")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("zona_virtual");

                    b.HasKey("Id");

                    b.ToTable("localizacoes", (string)null);
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.Moto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AnoFabricacao")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LocacaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocalizacaoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Placa")
                        .IsUnique();

                    b.ToTable("motos", (string)null);
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.Patio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Andar")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Andar");

                    b.Property<Guid>("FilialId")
                        .HasColumnType("uuid")
                        .HasColumnName("FilialId");

                    b.Property<string>("NomePatio")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("NomePatio");

                    b.Property<string>("TamanhoPatio")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("TamanhoPatio");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("patios", (string)null);
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.Cliente", b =>
                {
                    b.OwnsOne("EasyMoto.Domain.ValueObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cpf");

                            b1.HasKey("ClienteId");

                            b1.ToTable("clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("EasyMoto.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(160)
                                .HasColumnType("character varying(160)")
                                .HasColumnName("email");

                            b1.HasKey("ClienteId");

                            b1.ToTable("clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("EasyMoto.Domain.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("telefone");

                            b1.HasKey("ClienteId");

                            b1.ToTable("clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.ClienteLocacao", b =>
                {
                    b.OwnsOne("EasyMoto.Domain.ValueObjects.Periodo", "Periodo", b1 =>
                        {
                            b1.Property<Guid>("ClienteLocacaoId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Fim")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("fim");

                            b1.Property<DateTime>("Inicio")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("inicio");

                            b1.HasKey("ClienteLocacaoId");

                            b1.ToTable("locacoes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteLocacaoId");
                        });

                    b.Navigation("Periodo")
                        .IsRequired();
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.Filial", b =>
                {
                    b.HasOne("EasyMoto.Domain.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("EasyMoto.Domain.Entities.Funcionario", b =>
                {
                    b.HasOne("EasyMoto.Domain.Entities.Filial", "Filial")
                        .WithMany()
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Filial");
                });
#pragma warning restore 612, 618
        }
    }
}
